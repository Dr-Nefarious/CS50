// An array is made up of contiguous memory

What if you have an array of numbers and want to know what position contains the integer 50?
Computers can't just look at the array and have a "bird's eye view" of it like we can
Computer has to individually check each position of the array and determine which one contains 50

What if we want a bool that tells us (y/n) -> a number is present
We need an algorithm to do this

Linear search:
for each door
    if 50 is behind each door
        Return true
Return false

If you added if/else return false -> It would have returned false before finding the 50

for i from 0 to n-1
    if 50 is behind doors[i]
        Return true
Return false

Binary search -> sort the array first

If no doors left    
    Return false
If 50 behind middle door
    Return true
Else if 50 < middle door
    Search left half
Else if 50 > middle door
    Search right half

// Here's a bettwe way of doing it
if no doors left    
    Return false
If 50 is behind doors[middle]
    return true
else if 50 < doors[middle]
    search doors[0] through doors[middle - 1]
else if 50 > doors[middle]
    search doors[middle + 1] through doors[n - 1] // The last element of any array is always n-1 because we start counting at zero

Running time
(add graph)

log2(n) refers to tearing the book in half over and over again

big O notation -> You don't really care about the order of the smaller ones. O(n/2) becomes O(n) because if you have billions of pages, going two at a time
won't make much of a difference than going one page at a time
Tearing the book over and over again: O(log n)

Common formulas for analyzing algorithms from slowest to fastest
O(n^2)
O(n log n)
O(n)
O(log n)
O(1) // Take a fixed number of steps or one step no matter how big n is

Omega is the symbol for describing the best case of the algorithms (lower bound)
** how few steps an algorithm takes
If the 50 was in the first door opened, it would have been omega(1)
Because only one step was needed

If an algorithm has the identical upper and lower bound, you can use a theta
An example is counting everyone in a room. You can't do much better/faster unless you skip people

search.c 
#include <cs50.h>
#include <stdio.h>

// This is a code implementation of linear search

int main(void)
{
    int  numbers[] = {20, 500, 10, 5, 100, 1, 50};

    int n = get_int("Number: ");
    for (int i = 0; i < 7; i++)
    {
        if (numbers[i] == n)
        {
            printf("Found\n");
            return 0;
        }
    }
    printf("Not found\n");
    return 1;
}

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string strings[] = {"battleship", "boot", "cannon", "iron", "thimble", "top hat"};

    string s = get_string("String: ");
    for (int i = 0; i < 6; i++)
    {
        // In C, you cannot compare two strings using ==
        // String compare take two strings as input, and returns 0 if they are zero
        if (strcmp(strings[i], s) == 0)
        {
            printf("Found\n");
            return 0;
        }
    }
    printf("Not found\n");
    return 1;
}

//Segmentation fauly (core dumped) eans

In terminal -> $ echo $? Tells you what was returned

code phonebook.c

int main(void)
{
    string main[] = {"Carter", "David"};
    string numbers[] = {"+1-617-495-1000", "+1-949-468-2750"};

    string name = get_string("Name: ");
    for (int i = 0; i < 2; i++)
    {
        if (strcmp(names[i], name) == 0)
        {
            printf("Found %s\n", numbers[i]);
            return 0;
        }
    }
    printf("Not found\n");
    return 1;
}

// arrays are lightweight data structure that allow you to clump the same datatypes together

// in C you can create your own data structures with their own names

typedef struct
{
    // What you want inside of it
    string name;
    string number;
}
person; // Name of the structure

int main(void)
{
    person people[2]; // We want two people to exist inside of this array

    people[0].name = "Carter";
    people[0].number = "+1-617-495-1000";

    people[1].name = "David";
    people[1].name = "+1-949-468-2750";

    string name = get_string("Name: ");
    for (int i = 0; i < 2; i++)
    {
        if (strcmp(people[i].name, name) == 0)
        {
            printf("Found %s\n", people[i].number);
            return 0;
        }
    }
    printf("Not found\n");
    return 1;
}

// Sorting

What if we want to sort this list of numbers?
    7 2 5 4 1 6 0 3
The input is the unsorted list and the output is the sorted (0 1 2 3 4 5 6 7)

for i from 0 to n-1
    Find smallest number between numbers[i] and numbers[n-1]
    Swap smallest number with numbers[i]

Bubble sort -> The largest numbers "bubble" to the top of the array
Compares pairs of numbers to see which of the two are larger/smaller
Swaps them if one is in the wrong position

Selection Sort
(n-1) + (n-2) + (n-3)+...+ 1 -> n(n-1)/2 = n^2/2 -n/2
As n gets larger, the n^2 will be the one that gets bigger faster 
So it's on the order of n^2 steps O(n^2)

Even if the sort is already sorted (best case) -> It will still need to compare against each number (omega(n^2))

Bubble sort
Repeat n times
    for i from 0 to n-2
        if numbers[i] and numbers[i+1] out of order
            swap them

//why are we doing it from n-2 instead of n-1? Because you're looking at the ith person and the i-1th person.
 You don't want to point your left finger at the last person. You want to point to the second to last person and compare them to the last person

 (n-1) x (n-1) -> n^2 -2n + 1 ->  on the order of n^2

 What would the lower bound of bubble sort be? omega(n)

Bubble sort is still very slowest

Recursion -> refers to a function that can call itself 

If no doors left
    Return false
If number behind middle door
    Return true
Else if number < middle door
    Search left half
Else if number > middle door 
    Search right half

Search right/left half are the recursive parts of the function that are called over and over
But it's on a small problem as you cut in half over and over and again


code iteration.C

void draw(int n);

int main(void)
{
    int height = get_int("Height: ");
    draw(height);
}

void draw(int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < i + 1; j++)
        // When i is 0, you print one brick, when i is 1, your print out two bricks
        {
            printf("#");
        }
        printf("\n");
    }
}

recursion.C

void draw(int n);

int main(void)
{
    //draw(1);

}

void draw(int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("#");
    }
    printf("\n");
    draw(n + 1);
}

// Let's recursively create bricks 

void draw(int n);

int main(void)
{
    int height = get_int("Height: ");
    draw(height);

}

void draw(int n)
{
    // A pyramid of height 4 is just a pyramid of height 3 plus another row
    draw(n - 1);

    for (int i = 0; i < n; i++)
    {
        printf("#");
    }
    printf("\n");
    draw(n + 1);
}